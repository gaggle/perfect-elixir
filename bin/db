#!/usr/bin/env bash
set -euo pipefail

source "$(dirname "$0")/.shhelpers"

usage() {
  cecho "Usage: $(basename "$0") COMMAND [OPTIONS]"
  cecho ""
  cecho "Commands:"
  cecho "  start       Start the PostgreSQL server"
  cecho "  stop        Stop the PostgreSQL server"
  cecho "  nuke        Forcefully stop and delete database directory (" -b --yellow "DANGEROUS" ")"
  cecho ""
  cecho "OPTIONS:"
  cecho "  -h, --help  Show this help message and exit"
  cecho ""
  cecho "This script manages a PostgreSQL database in 'priv/db' directory. It initializes the directory if it isn't already initialized."
}

# Ensure at least one argument is provided
if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

COMMAND="$1"
shift

# Absolute path to db folder (this works even if priv/db doesn't exist)
dir="$(cd "$(dirname "$0")/.." && pwd)/priv/db"
rel_dir=$(realpath --relative-to=. "$dir")

case "$COMMAND" in
  start)
    if [[ ! -d "$dir" ]]; then
      step "Creating $dir" "mkdir -p \"$dir\""
    fi

    if [[ ! -f "$dir/PG_VERSION" ]]; then
      step "Initializing database" "initdb -D \"$dir\""
    fi

    step --with-output "Database started" "pg_ctl -D \"$dir\" -l \"$dir/logfile\" start"
    ;;
  stop)
    step --with-output "Database stopped" "pg_ctl -D \"$dir\" stop"
    ;;
  nuke)
    cecho -n --yellow "Are you sure you want to completely erase the database directory at " --yellow --bold "$rel_dir" --yellow "? This cannot be undone ðŸš¨"
    read -p " [y/N] " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
      cecho --yellow "Nuking the databaseâ€¦ ðŸ’¥"
      # Ignore errors if the server is not running
      step "Force-stopping database" "pg_ctl -D \"$dir\" stop -m immediate 2>&1 || true"
      step "Removing database directory '$rel_dir'" "rm -rf \"$dir\""
    else
      cecho "Nuke operation aborted"
    fi
    ;;
  -h|--help)
    usage
    ;;
  *)
    echo "Error: Unknown command '$COMMAND'"
    usage
    exit 1
    ;;
esac
